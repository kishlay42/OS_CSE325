01 (A) - Read the last 10 characters using system calls:
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    off_t file_size = lseek(fd, 0, SEEK_END);
    off_t offset = (file_size > 10) ? (file_size - 10) : 0;
    lseek(fd, offset, SEEK_SET);

    char buffer[11];
    ssize_t bytes_read = read(fd, buffer, 10);
    if (bytes_read == -1) {
        perror("Error reading file");
        close(fd);
        return 1;
    }

    buffer[bytes_read] = '\0';
    printf("Last 10 characters: %s\n", buffer);

    close(fd);
    return 0;
}
------------------------------------------------------------------
1 (B) - Create a parent process and a child process using fork:

#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();
    if (pid == -1) {
        perror("Error in fork");
        return 1;
    }

    if (pid == 0) {
        // Child process
        printf("Child process: PID = %d\n", getpid());
    } else {
        // Parent process
        printf("Parent process: PID = %d, Child PID = %d\n", getpid(), pid);
    }

    return 0;
}
--------------------------------------------------------------------

02 (A) - Create threads where one thread displays a welcome message and the second thread adds two numbers:

#include <stdio.h>
#include <pthread.h>

void *welcome_thread(void *arg) {
    printf("Welcome to the program!\n");
    pthread_exit(NULL);
}

void *addition_thread(void *arg) {
    int a = 5, b = 7;
    int sum = a + b;
    printf("The sum of %d and %d is %d\n", a, b, sum);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;
    
    pthread_create(&thread1, NULL, welcome_thread, NULL);
    pthread_create(&thread2, NULL, addition_thread, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    return 0;
}
-----------------------------------------------------------------------------
02 (B) - Implement synchronization using mutex locks:

#include <stdio.h>
#include <pthread.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int shared_data = 0;

void *thread_function(void *arg) {
    pthread_mutex_lock(&mutex);
    shared_data++;
    printf("Thread %ld: Incremented shared data to %d\n", pthread_self(), shared_data);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;
    
    pthread_create(&thread1, NULL, thread_function, NULL);
    pthread_create(&thread2, NULL, thread_function, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    return 0;
}
-----------------------------------------------------------------------------------
03 (A) - Implement IPC (Inter-Process Communication) using unnamed pipes:

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int pipefd[2];
    pid_t pid;
    char buffer[100];

    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {  // Child process
        close(pipefd[1]);  // Close write end of the pipe
        read(pipefd[0], buffer, sizeof(buffer));
        printf("Child process received: %s\n", buffer);
        close(pipefd[0]);  // Close read end of the pipe
        exit(EXIT_SUCCESS);
    } else {  // Parent process
        close(pipefd[0]);  // Close read end of the pipe
        printf("Enter message to send to child process: ");
        fgets(buffer, sizeof(buffer), stdin);
        write(pipefd[1], buffer, strlen(buffer) + 1);
        close(pipefd[1]);  // Close write end of the pipe
        wait(NULL);  // Wait for child process to finish
        exit(EXIT_SUCCESS);
    }

    return 0;
}
-----------------------------------------------------------------------------
03 (B) - Read and display the last 5 characters from a file using system calls:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#define BUF_SIZE 5

int main() {
    int fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    off_t offset = lseek(fd, -BUF_SIZE, SEEK_END);
    if (offset == -1) {
        perror("Error seeking file");
        close(fd);
        return 1;
    }

    char buffer[BUF_SIZE + 1];
    ssize_t bytes_read = read(fd, buffer, BUF_SIZE);
    if (bytes_read == -1) {
        perror("Error reading file");
        close(fd);
        return 1;
    }

    buffer[bytes_read] = '\0';
    printf("Last %d characters: %s\n", BUF_SIZE, buffer);

    close(fd);
    return 0;
}
--------------------------------------------------------------
04 (A) - Implement IPC using named pipes:
// Producer Program
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    char *fifo = "/tmp/myfifo";

    // Creating the named pipe
    mkfifo(fifo, 0666);

    // Open the named pipe for writing
    fd = open(fifo, O_WRONLY);
    write(fd, "Hello from producer!", sizeof("Hello from producer!"));
    close(fd);

    return 0;
}
// Consumer Program
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd;
    char *fifo = "/tmp/myfifo";
    char buffer[1024];

    // Open the named pipe for reading
    fd = open(fifo, O_RDONLY);
    read(fd, buffer, sizeof(buffer));
    printf("Received message: %s\n", buffer);
    close(fd);

    // Remove the named pipe
    unlink(fifo);

    return 0;
}

---------------------------------------------------------------------------------
04 (B) - Create a file with some content and write "hello" into it after 4 characters using system calls:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd = open("file.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    char content[] = "This is a test file.";
    write(fd, content, sizeof(content) - 1); // -1 to exclude the null terminator
    lseek(fd, 4, SEEK_SET); // Move the file cursor to the 4th position
    write(fd, "hello", 5); // Write "hello" into the file
    close(fd);
    return 0;
}
------------------------------------------------------------------------------
05 (A) - Demonstrate a race condition:

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

int global_var = 0;

void *increment(void *arg) {
    for (int i = 0; i < 100000; i++) {
        global_var++;
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t thread1, thread2;

    pthread_create(&thread1, NULL, increment, NULL);
    pthread_create(&thread2, NULL, increment, NULL);

    pthread_join(thread1, NULL);
    pthread_join(thread2, NULL);

    printf("Global variable value: %d\n", global_var);

    return 0;
}
-----------------------------------------------------------------------------------

05 (B) - Calculate the sum of 2 numbers in the parent process and display the result:


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int num1 = 5, num2 = 7;
    pid_t pid = fork();

    if (pid == 0) { // Child process
        int sum = num1 + num2;
        printf("Child process - Sum: %d\n", sum);
    } else if (pid > 0) { // Parent process
        wait(NULL); // Wait for the child process to finish
        int sum = num1 + num2;
        printf("Parent process - Sum: %d\n", sum);
    } else {
        perror("Fork failed");
        exit(EXIT_FAILURE);
    }

    return 0;
}
-------------------------------------------------------------------------------------
06 (A) - Create two threads, one for addition and the other for subtraction, and return their results to the main function:
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *addition(void *args) {
    int num1 = *(int *)args;
    int num2 = *((int *)args + 1);
    int *result = malloc(sizeof(int));
    *result = num1 + num2;
    pthread_exit(result);
}

void *subtraction(void *args) {
    int num1 = *(int *)args;
    int num2 = *((int *)args + 1);
    int *result = malloc(sizeof(int));
    *result = num1 - num2;
    pthread_exit(result);
}

int main() {
    pthread_t add_thread, sub_thread;
    int nums[2] = {10, 5};
    void *add_result, *sub_result;

    pthread_create(&add_thread, NULL, addition, (void *)nums);
    pthread_create(&sub_thread, NULL, subtraction, (void *)nums);

    pthread_join(add_thread, &add_result);
    pthread_join(sub_thread, &sub_result);

    printf("Addition result: %d\n", *(int *)add_result);
    printf("Subtraction result: %d\n", *(int *)sub_result);

    free(add_result);
    free(sub_result);

    return 0;
}
------------------------------------------------------------------------------

06 (B) - Write into a pipe using popen() and pclose():

#include <stdio.h>

int main() {
    FILE *pipe = popen("cat > output.txt", "w");
    if (pipe == NULL) {
        perror("popen");
        return 1;
    }

    fprintf(pipe, "Hello from popen!");
    pclose(pipe);

    return 0;
}
-----------------------------------------------------------------------------------

07 (A) - Create threads where one thread generates numbers from 1 to 10, and the other checks if a number entered by the user is even or odd:

#include <stdio.h>
#include <pthread.h>

void *number_generator(void *args) {
    for (int i = 1; i <= 10; i++) {
        printf("Generated number: %d\n", i);
    }
    pthread_exit(NULL);
}

void *check_even_odd(void *args) {
    int number;
    printf("Enter a number: ");
    scanf("%d", &number);
    if (number % 2 == 0) {
        printf("%d is even.\n", number);
    } else {
        printf("%d is odd.\n", number);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t generator_thread, checker_thread;

    pthread_create(&generator_thread, NULL, number_generator, NULL);
    pthread_create(&checker_thread, NULL, check_even_odd, NULL);

    pthread_join(generator_thread, NULL);
    pthread_join(checker_thread, NULL);

    return 0;
}
----------------------------------------------------------------------
07 (B) - Read characters from the 3rd to the 10th position from a file opened in read-only mode using system calls:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    char buffer[8]; // 10 - 3 + 1 = 8
    if (lseek(fd, 3, SEEK_SET) == -1) {
        perror("Error seeking file");
        close(fd);
        return 1;
    }

    ssize_t bytes_read = read(fd, buffer, sizeof(buffer) - 1);
    if (bytes_read == -1) {
        perror("Error reading file");
        close(fd);
        return 1;
    }
    buffer[bytes_read] = '\0';
    printf("Characters from 3rd to 10th position: %s\n", buffer);

    close(fd);
    return 0;
}
----------------------------------------------------------------------------------
08 (A) - Read characters from the first to the 15th position from a file opened in read-only mode using system calls:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main() {
    int fd = open("file.txt", O_RDONLY);
    if (fd == -1) {
        perror("Error opening file");
        return 1;
    }

    char buffer[16]; // 15 + 1 = 16
    ssize_t bytes_read = read(fd, buffer, sizeof(buffer) - 1);
    if (bytes_read == -1) {
        perror("Error reading file");
        close(fd);
        return 1;
    }
    buffer[bytes_read] = '\0';
    printf("Characters from 1st to 15th position: %s\n", buffer);

    close(fd);
    return 0;
}
--------------------------------------------------------------------------------------
08 (B) - Implement a race condition using semaphores:

#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

int shared_variable = 0;
sem_t semaphore;

void *increment(void *args) {
    sem_wait(&semaphore);
    shared_variable++;
    printf("Incremented value: %d\n", shared_variable);
    sem_post(&semaphore);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[5];
    sem_init(&semaphore, 0, 1);

    for (int i = 0; i < 5; i++) {
        pthread_create(&threads[i], NULL, increment, NULL);
    }

    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }

    sem_destroy(&semaphore);
    return 0;
}
--------------------------------------------------------------------------------------
09 (A) - Create a process hierarchy and verify relationships between processes:

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid > 0) {
        printf("Parent process: PID = %d\n", getpid());
        printf("Child process: PID = %d\n", pid);
    } else if (pid == 0) {
        printf("Child process: PID = %d\n", getpid());
    } else {
        perror("Fork failed");
        return 1;
    }

    return 0;
}
----------------------------------------------------------------------------------

09 (B) - Copy data from one file to another using system calls:

#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

#define BUF_SIZE 4096

int main() {
    int source_fd = open("source.txt", O_RDONLY);
    if (source_fd == -1) {
        perror("Error opening source file");
        return 1;
    }

    int dest_fd = open("destination.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (dest_fd == -1) {
        perror("Error opening destination file");
        close(source_fd);
        return 1;
    }

    char buffer[BUF_SIZE];
    ssize_t bytes_read;

    while ((bytes_read = read(source_fd, buffer, sizeof(buffer))) > 0) {
        ssize_t bytes_written = write(dest_fd, buffer, bytes_read);
        if (bytes_written != bytes_read) {
            perror("Error writing to destination file");
            close(source_fd);
            close(dest_fd);
            return 1;
        }
    }

    if (bytes_read == -1) {
        perror("Error reading from source file");
        close(source_fd);
        close(dest_fd);
        return 1;
    }

    close(source_fd);
    close(dest_fd);
    return 0;
}
----------------------------------------------------------------------------------------
10 (A) - Implement synchronization among processes using mutex locks:


#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 5

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
int shared_variable = 0;

void *increment(void *args) {
    pthread_mutex_lock(&mutex);
    shared_variable++;
    printf("Thread %ld: Incremented value: %d\n", pthread_self(), shared_variable);
    pthread_mutex_unlock(&mutex);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];

    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_create(&threads[i], NULL, increment, NULL);
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    pthread_mutex_destroy(&mutex);
    return 0;
}
----------------------------------------------------------------------------------------
10 (B) - Create a process hierarchy and verify relationships using getpgrp() and getppid():

#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid == 0) {
        printf("Child process: PID = %d, PPID = %d, PGID = %d\n", getpid(), getppid(), getpgrp());
    } else if (pid > 0) {
        printf("Parent process: PID = %d, Child PID = %d, PGID = %d\n", getpid(), pid, getpgrp());
    } else {
        perror("Fork failed");
        return 1;
    }

    return 0;
}
-----------------------------------------------------------------------------------------


















